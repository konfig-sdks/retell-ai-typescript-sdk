/* tslint:disable */
/* eslint-disable */
/*
Retell SDK

API for voice AI. Effortlessly integrate human-like Voice AI into your product. | We are building an API that enables your product to provide an intuitive and engaging way for user interaction - through voice.

The version of the OpenAPI document: 1.0.0
Contact: founders@retellai.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CallBase } from '../models';
// @ts-ignore
import { CallDetail } from '../models';
// @ts-ignore
import { CallEstablishConnection401Response } from '../models';
// @ts-ignore
import { CallEstablishConnection402Response } from '../models';
// @ts-ignore
import { CallEstablishConnection422Response } from '../models';
// @ts-ignore
import { CallEstablishConnection429Response } from '../models';
// @ts-ignore
import { CallEstablishConnection500Response } from '../models';
// @ts-ignore
import { CallEstablishConnectionRequest } from '../models';
// @ts-ignore
import { CallEstablishConnectionResponse } from '../models';
// @ts-ignore
import { CallGetDetailsFilterCriteriaParameter } from '../models';
// @ts-ignore
import { CallMakeConnectionRequest } from '../models';
// @ts-ignore
import { CallMakeConnectionRequestPhoneNumber } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CallApi - axios parameter creator
 * @export
 */
export const CallApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Register Call To Get CallId To Establish Connection
         * @param {CallEstablishConnectionRequest} callEstablishConnectionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        establishConnection: async (callEstablishConnectionRequest: CallEstablishConnectionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'callEstablishConnectionRequest' is not null or undefined
            assertParamExists('establishConnection', 'callEstablishConnectionRequest', callEstablishConnectionRequest)
            const localVarPath = `/register-call`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: callEstablishConnectionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/register-call',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(callEstablishConnectionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve details of a specific call
         * @param {string} callId The call id to retrieve call history for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails: async (callId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'callId' is not null or undefined
            assertParamExists('getDetails', 'callId', callId)
            const localVarPath = `/get-call/{call_id}`
                .replace(`{${"call_id"}}`, encodeURIComponent(String(callId !== undefined ? callId : `-call_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/get-call/{call_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve call details
         * @param {CallGetDetailsFilterCriteriaParameter} [filterCriteria] 
         * @param {'ascending' | 'descending'} [sortOrder] The calls will be sorted by &#x60;start_timestamp&#x60;, whether to return the calls in ascending or descending order.
         * @param {number} [limit] Limit the number of calls returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails_1: async (filterCriteria?: CallGetDetailsFilterCriteriaParameter, sortOrder?: 'ascending' | 'descending', limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/list-calls`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (filterCriteria !== undefined) {
                localVarQueryParameter['filter_criteria'] = filterCriteria;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sort_order'] = sortOrder;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/list-calls',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new phone call
         * @param {CallMakeConnectionRequest} callMakeConnectionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        makeConnection: async (callMakeConnectionRequest: CallMakeConnectionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'callMakeConnectionRequest' is not null or undefined
            assertParamExists('makeConnection', 'callMakeConnectionRequest', callMakeConnectionRequest)
            const localVarPath = `/create-phone-call`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: callMakeConnectionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/create-phone-call',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(callMakeConnectionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CallApi - functional programming interface
 * @export
 */
export const CallApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CallApiAxiosParamCreator(configuration)
    return {
        /**
         * Register Call To Get CallId To Establish Connection
         * @param {CallApiEstablishConnectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async establishConnection(requestParameters: CallApiEstablishConnectionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CallBase>> {
            const callEstablishConnectionRequest: CallEstablishConnectionRequest = {
                agent_id: requestParameters.agent_id,
                audio_websocket_protocol: requestParameters.audio_websocket_protocol,
                audio_encoding: requestParameters.audio_encoding,
                sample_rate: requestParameters.sample_rate,
                end_call_after_silence_ms: requestParameters.end_call_after_silence_ms,
                from_number: requestParameters.from_number,
                to_number: requestParameters.to_number,
                metadata: requestParameters.metadata,
                retell_llm_dynamic_variables: requestParameters.retell_llm_dynamic_variables
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.establishConnection(callEstablishConnectionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve details of a specific call
         * @param {CallApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDetails(requestParameters: CallApiGetDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CallDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetails(requestParameters.callId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve call details
         * @param {CallApiGetDetails0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDetails_1(requestParameters: CallApiGetDetails0Request = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CallDetail>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetails_1(requestParameters.filterCriteria, requestParameters.sortOrder, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new phone call
         * @param {CallApiMakeConnectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async makeConnection(requestParameters: CallApiMakeConnectionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CallBase>> {
            const callMakeConnectionRequest: CallMakeConnectionRequest = {
                phone_number: requestParameters.phone_number,
                override_agent_id: requestParameters.override_agent_id,
                retell_llm_dynamic_variables: requestParameters.retell_llm_dynamic_variables
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.makeConnection(callMakeConnectionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CallApi - factory interface
 * @export
 */
export const CallApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CallApiFp(configuration)
    return {
        /**
         * Register Call To Get CallId To Establish Connection
         * @param {CallApiEstablishConnectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        establishConnection(requestParameters: CallApiEstablishConnectionRequest, options?: AxiosRequestConfig): AxiosPromise<CallBase> {
            return localVarFp.establishConnection(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve details of a specific call
         * @param {CallApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails(requestParameters: CallApiGetDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<CallDetail> {
            return localVarFp.getDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve call details
         * @param {CallApiGetDetails0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails_1(requestParameters: CallApiGetDetails0Request = {}, options?: AxiosRequestConfig): AxiosPromise<Array<CallDetail>> {
            return localVarFp.getDetails_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new phone call
         * @param {CallApiMakeConnectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        makeConnection(requestParameters: CallApiMakeConnectionRequest, options?: AxiosRequestConfig): AxiosPromise<CallBase> {
            return localVarFp.makeConnection(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for establishConnection operation in CallApi.
 * @export
 * @interface CallApiEstablishConnectionRequest
 */
export type CallApiEstablishConnectionRequest = {
    
} & CallEstablishConnectionRequest

/**
 * Request parameters for getDetails operation in CallApi.
 * @export
 * @interface CallApiGetDetailsRequest
 */
export type CallApiGetDetailsRequest = {
    
    /**
    * The call id to retrieve call history for.
    * @type {string}
    * @memberof CallApiGetDetails
    */
    readonly callId: string
    
}

/**
 * Request parameters for getDetails_1 operation in CallApi.
 * @export
 * @interface CallApiGetDetails0Request
 */
export type CallApiGetDetails0Request = {
    
    /**
    * 
    * @type {CallGetDetailsFilterCriteriaParameter}
    * @memberof CallApiGetDetails0
    */
    readonly filterCriteria?: CallGetDetailsFilterCriteriaParameter
    
    /**
    * The calls will be sorted by `start_timestamp`, whether to return the calls in ascending or descending order.
    * @type {'ascending' | 'descending'}
    * @memberof CallApiGetDetails0
    */
    readonly sortOrder?: 'ascending' | 'descending'
    
    /**
    * Limit the number of calls returned.
    * @type {number}
    * @memberof CallApiGetDetails0
    */
    readonly limit?: number
    
}

/**
 * Request parameters for makeConnection operation in CallApi.
 * @export
 * @interface CallApiMakeConnectionRequest
 */
export type CallApiMakeConnectionRequest = {
    
} & CallMakeConnectionRequest

/**
 * CallApiGenerated - object-oriented interface
 * @export
 * @class CallApiGenerated
 * @extends {BaseAPI}
 */
export class CallApiGenerated extends BaseAPI {
    /**
     * Register Call To Get CallId To Establish Connection
     * @param {CallApiEstablishConnectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallApiGenerated
     */
    public establishConnection(requestParameters: CallApiEstablishConnectionRequest, options?: AxiosRequestConfig) {
        return CallApiFp(this.configuration).establishConnection(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve details of a specific call
     * @param {CallApiGetDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallApiGenerated
     */
    public getDetails(requestParameters: CallApiGetDetailsRequest, options?: AxiosRequestConfig) {
        return CallApiFp(this.configuration).getDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve call details
     * @param {CallApiGetDetails0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallApiGenerated
     */
    public getDetails_1(requestParameters: CallApiGetDetails0Request = {}, options?: AxiosRequestConfig) {
        return CallApiFp(this.configuration).getDetails_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new phone call
     * @param {CallApiMakeConnectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallApiGenerated
     */
    public makeConnection(requestParameters: CallApiMakeConnectionRequest, options?: AxiosRequestConfig) {
        return CallApiFp(this.configuration).makeConnection(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
