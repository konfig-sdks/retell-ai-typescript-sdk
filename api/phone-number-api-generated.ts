/* tslint:disable */
/* eslint-disable */
/*
Retell SDK

API for voice AI. Effortlessly integrate human-like Voice AI into your product. | We are building an API that enables your product to provide an intuitive and engaging way for user interaction - through voice.

The version of the OpenAPI document: 1.0.0
Contact: founders@retellai.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CallEstablishConnection401Response } from '../models';
// @ts-ignore
import { CallEstablishConnection422Response } from '../models';
// @ts-ignore
import { CallEstablishConnection500Response } from '../models';
// @ts-ignore
import { CallEstablishConnectionResponse } from '../models';
// @ts-ignore
import { PhoneNumberPurchaseNumberAndBindAgentRequest } from '../models';
// @ts-ignore
import { PhoneNumberResponse } from '../models';
// @ts-ignore
import { PhoneNumberUpdateRetellLlmRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PhoneNumberApi - axios parameter creator
 * @export
 */
export const PhoneNumberApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * List all phone numbers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllNumbers: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/list-phone-numbers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/list-phone-numbers',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve details of a specific phone number
         * @param {string} phoneNumber BCP 47 format of the number (+country code, then number with no space, no special characters), used as the unique identifier for phone number APIs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails: async (phoneNumber: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'phoneNumber' is not null or undefined
            assertParamExists('getDetails', 'phoneNumber', phoneNumber)
            const localVarPath = `/get-phone-number/{phone_number}`
                .replace(`{${"phone_number"}}`, encodeURIComponent(String(phoneNumber !== undefined ? phoneNumber : `-phone_number-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/get-phone-number/{phone_number}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Buy a new phone number & Bind an agent
         * @param {PhoneNumberPurchaseNumberAndBindAgentRequest} phoneNumberPurchaseNumberAndBindAgentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchaseNumberAndBindAgent: async (phoneNumberPurchaseNumberAndBindAgentRequest: PhoneNumberPurchaseNumberAndBindAgentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'phoneNumberPurchaseNumberAndBindAgentRequest' is not null or undefined
            assertParamExists('purchaseNumberAndBindAgent', 'phoneNumberPurchaseNumberAndBindAgentRequest', phoneNumberPurchaseNumberAndBindAgentRequest)
            const localVarPath = `/create-phone-number`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: phoneNumberPurchaseNumberAndBindAgentRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/create-phone-number',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(phoneNumberPurchaseNumberAndBindAgentRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an existing phone number
         * @param {string} phoneNumber BCP 47 format of the number (+country code, then number with no space, no special characters), used as the unique identifier for phone number APIs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePhoneNumber: async (phoneNumber: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'phoneNumber' is not null or undefined
            assertParamExists('removePhoneNumber', 'phoneNumber', phoneNumber)
            const localVarPath = `/delete-phone-number/{phone_number}`
                .replace(`{${"phone_number"}}`, encodeURIComponent(String(phoneNumber !== undefined ? phoneNumber : `-phone_number-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/delete-phone-number/{phone_number}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing Retell LLM
         * @param {string} phoneNumber BCP 47 format of the number (+country code, then number with no space, no special characters), used as the unique identifier for phone number APIs.
         * @param {PhoneNumberUpdateRetellLlmRequest} phoneNumberUpdateRetellLlmRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRetellLlm: async (phoneNumber: string, phoneNumberUpdateRetellLlmRequest: PhoneNumberUpdateRetellLlmRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'phoneNumber' is not null or undefined
            assertParamExists('updateRetellLlm', 'phoneNumber', phoneNumber)
            // verify required parameter 'phoneNumberUpdateRetellLlmRequest' is not null or undefined
            assertParamExists('updateRetellLlm', 'phoneNumberUpdateRetellLlmRequest', phoneNumberUpdateRetellLlmRequest)
            const localVarPath = `/update-phone-number/{phone_number}`
                .replace(`{${"phone_number"}}`, encodeURIComponent(String(phoneNumber !== undefined ? phoneNumber : `-phone_number-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: phoneNumberUpdateRetellLlmRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/update-phone-number/{phone_number}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(phoneNumberUpdateRetellLlmRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PhoneNumberApi - functional programming interface
 * @export
 */
export const PhoneNumberApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PhoneNumberApiAxiosParamCreator(configuration)
    return {
        /**
         * List all phone numbers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllNumbers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PhoneNumberResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllNumbers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve details of a specific phone number
         * @param {PhoneNumberApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDetails(requestParameters: PhoneNumberApiGetDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PhoneNumberResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetails(requestParameters.phoneNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Buy a new phone number & Bind an agent
         * @param {PhoneNumberApiPurchaseNumberAndBindAgentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async purchaseNumberAndBindAgent(requestParameters: PhoneNumberApiPurchaseNumberAndBindAgentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PhoneNumberResponse>> {
            const phoneNumberPurchaseNumberAndBindAgentRequest: PhoneNumberPurchaseNumberAndBindAgentRequest = {
                agent_id: requestParameters.agent_id,
                area_code: requestParameters.area_code
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.purchaseNumberAndBindAgent(phoneNumberPurchaseNumberAndBindAgentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete an existing phone number
         * @param {PhoneNumberApiRemovePhoneNumberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removePhoneNumber(requestParameters: PhoneNumberApiRemovePhoneNumberRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removePhoneNumber(requestParameters.phoneNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an existing Retell LLM
         * @param {PhoneNumberApiUpdateRetellLlmRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRetellLlm(requestParameters: PhoneNumberApiUpdateRetellLlmRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PhoneNumberResponse>> {
            const phoneNumberUpdateRetellLlmRequest: PhoneNumberUpdateRetellLlmRequest = {
                agent_id: requestParameters.agent_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRetellLlm(requestParameters.phoneNumber, phoneNumberUpdateRetellLlmRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PhoneNumberApi - factory interface
 * @export
 */
export const PhoneNumberApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PhoneNumberApiFp(configuration)
    return {
        /**
         * List all phone numbers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllNumbers(options?: AxiosRequestConfig): AxiosPromise<Array<PhoneNumberResponse>> {
            return localVarFp.getAllNumbers(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve details of a specific phone number
         * @param {PhoneNumberApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails(requestParameters: PhoneNumberApiGetDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<PhoneNumberResponse> {
            return localVarFp.getDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Buy a new phone number & Bind an agent
         * @param {PhoneNumberApiPurchaseNumberAndBindAgentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchaseNumberAndBindAgent(requestParameters: PhoneNumberApiPurchaseNumberAndBindAgentRequest, options?: AxiosRequestConfig): AxiosPromise<PhoneNumberResponse> {
            return localVarFp.purchaseNumberAndBindAgent(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an existing phone number
         * @param {PhoneNumberApiRemovePhoneNumberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePhoneNumber(requestParameters: PhoneNumberApiRemovePhoneNumberRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removePhoneNumber(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing Retell LLM
         * @param {PhoneNumberApiUpdateRetellLlmRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRetellLlm(requestParameters: PhoneNumberApiUpdateRetellLlmRequest, options?: AxiosRequestConfig): AxiosPromise<PhoneNumberResponse> {
            return localVarFp.updateRetellLlm(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getDetails operation in PhoneNumberApi.
 * @export
 * @interface PhoneNumberApiGetDetailsRequest
 */
export type PhoneNumberApiGetDetailsRequest = {
    
    /**
    * BCP 47 format of the number (+country code, then number with no space, no special characters), used as the unique identifier for phone number APIs.
    * @type {string}
    * @memberof PhoneNumberApiGetDetails
    */
    readonly phoneNumber: string
    
}

/**
 * Request parameters for purchaseNumberAndBindAgent operation in PhoneNumberApi.
 * @export
 * @interface PhoneNumberApiPurchaseNumberAndBindAgentRequest
 */
export type PhoneNumberApiPurchaseNumberAndBindAgentRequest = {
    
} & PhoneNumberPurchaseNumberAndBindAgentRequest

/**
 * Request parameters for removePhoneNumber operation in PhoneNumberApi.
 * @export
 * @interface PhoneNumberApiRemovePhoneNumberRequest
 */
export type PhoneNumberApiRemovePhoneNumberRequest = {
    
    /**
    * BCP 47 format of the number (+country code, then number with no space, no special characters), used as the unique identifier for phone number APIs.
    * @type {string}
    * @memberof PhoneNumberApiRemovePhoneNumber
    */
    readonly phoneNumber: string
    
}

/**
 * Request parameters for updateRetellLlm operation in PhoneNumberApi.
 * @export
 * @interface PhoneNumberApiUpdateRetellLlmRequest
 */
export type PhoneNumberApiUpdateRetellLlmRequest = {
    
    /**
    * BCP 47 format of the number (+country code, then number with no space, no special characters), used as the unique identifier for phone number APIs.
    * @type {string}
    * @memberof PhoneNumberApiUpdateRetellLlm
    */
    readonly phoneNumber: string
    
} & PhoneNumberUpdateRetellLlmRequest

/**
 * PhoneNumberApiGenerated - object-oriented interface
 * @export
 * @class PhoneNumberApiGenerated
 * @extends {BaseAPI}
 */
export class PhoneNumberApiGenerated extends BaseAPI {
    /**
     * List all phone numbers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhoneNumberApiGenerated
     */
    public getAllNumbers(options?: AxiosRequestConfig) {
        return PhoneNumberApiFp(this.configuration).getAllNumbers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve details of a specific phone number
     * @param {PhoneNumberApiGetDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhoneNumberApiGenerated
     */
    public getDetails(requestParameters: PhoneNumberApiGetDetailsRequest, options?: AxiosRequestConfig) {
        return PhoneNumberApiFp(this.configuration).getDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Buy a new phone number & Bind an agent
     * @param {PhoneNumberApiPurchaseNumberAndBindAgentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhoneNumberApiGenerated
     */
    public purchaseNumberAndBindAgent(requestParameters: PhoneNumberApiPurchaseNumberAndBindAgentRequest, options?: AxiosRequestConfig) {
        return PhoneNumberApiFp(this.configuration).purchaseNumberAndBindAgent(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an existing phone number
     * @param {PhoneNumberApiRemovePhoneNumberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhoneNumberApiGenerated
     */
    public removePhoneNumber(requestParameters: PhoneNumberApiRemovePhoneNumberRequest, options?: AxiosRequestConfig) {
        return PhoneNumberApiFp(this.configuration).removePhoneNumber(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an existing Retell LLM
     * @param {PhoneNumberApiUpdateRetellLlmRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhoneNumberApiGenerated
     */
    public updateRetellLlm(requestParameters: PhoneNumberApiUpdateRetellLlmRequest, options?: AxiosRequestConfig) {
        return PhoneNumberApiFp(this.configuration).updateRetellLlm(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
