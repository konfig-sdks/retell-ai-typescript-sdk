/* tslint:disable */
/* eslint-disable */
/*
Retell SDK

API for voice AI. Effortlessly integrate human-like Voice AI into your product. | We are building an API that enables your product to provide an intuitive and engaging way for user interaction - through voice.

The version of the OpenAPI document: 1.0.0
Contact: founders@retellai.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CallEstablishConnection401Response } from '../models';
// @ts-ignore
import { CallEstablishConnection422Response } from '../models';
// @ts-ignore
import { CallEstablishConnection500Response } from '../models';
// @ts-ignore
import { CallEstablishConnectionResponse } from '../models';
// @ts-ignore
import { RetellLLMBase } from '../models';
// @ts-ignore
import { RetellLLMResponse } from '../models';
// @ts-ignore
import { State } from '../models';
// @ts-ignore
import { Tool } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * RetellApi - axios parameter creator
 * @export
 */
export const RetellApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete an existing Retell LLM
         * @param {string} llmId Unique id of the Retell LLM to be deleted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLlm: async (llmId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'llmId' is not null or undefined
            assertParamExists('deleteLlm', 'llmId', llmId)
            const localVarPath = `/delete-retell-llm/{llm_id}`
                .replace(`{${"llm_id"}}`, encodeURIComponent(String(llmId !== undefined ? llmId : `-llm_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/delete-retell-llm/{llm_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve details of a specific Retell LLM
         * @param {string} llmId Unique id of the Retell LLM to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLlmDetails: async (llmId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'llmId' is not null or undefined
            assertParamExists('getLlmDetails', 'llmId', llmId)
            const localVarPath = `/get-retell-llm/{llm_id}`
                .replace(`{${"llm_id"}}`, encodeURIComponent(String(llmId !== undefined ? llmId : `-llm_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/get-retell-llm/{llm_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new Retell LLM
         * @param {RetellLLMBase} retellLLMBase 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newLlm: async (retellLLMBase: RetellLLMBase, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'retellLLMBase' is not null or undefined
            assertParamExists('newLlm', 'retellLLMBase', retellLLMBase)
            const localVarPath = `/create-retell-llm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: retellLLMBase,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/create-retell-llm',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(retellLLMBase, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing Retell LLM
         * @param {string} llmId Unique id of the Retell LLM to be updated.
         * @param {RetellLLMBase} retellLLMBase 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLlm: async (llmId: string, retellLLMBase: RetellLLMBase, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'llmId' is not null or undefined
            assertParamExists('updateLlm', 'llmId', llmId)
            // verify required parameter 'retellLLMBase' is not null or undefined
            assertParamExists('updateLlm', 'retellLLMBase', retellLLMBase)
            const localVarPath = `/update-retell-llm/{llm_id}`
                .replace(`{${"llm_id"}}`, encodeURIComponent(String(llmId !== undefined ? llmId : `-llm_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: retellLLMBase,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/update-retell-llm/{llm_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(retellLLMBase, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RetellApi - functional programming interface
 * @export
 */
export const RetellApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RetellApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete an existing Retell LLM
         * @param {RetellApiDeleteLlmRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLlm(requestParameters: RetellApiDeleteLlmRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLlm(requestParameters.llmId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve details of a specific Retell LLM
         * @param {RetellApiGetLlmDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLlmDetails(requestParameters: RetellApiGetLlmDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetellLLMResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLlmDetails(requestParameters.llmId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new Retell LLM
         * @param {RetellApiNewLlmRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newLlm(requestParameters: RetellApiNewLlmRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetellLLMResponse>> {
            const retellLLMBase: RetellLLMBase = {
                general_prompt: requestParameters.general_prompt,
                general_tools: requestParameters.general_tools,
                states: requestParameters.states,
                starting_state: requestParameters.starting_state,
                begin_message: requestParameters.begin_message
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.newLlm(retellLLMBase, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an existing Retell LLM
         * @param {RetellApiUpdateLlmRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLlm(requestParameters: RetellApiUpdateLlmRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetellLLMResponse>> {
            const retellLLMBase: RetellLLMBase = {
                general_prompt: requestParameters.general_prompt,
                general_tools: requestParameters.general_tools,
                states: requestParameters.states,
                starting_state: requestParameters.starting_state,
                begin_message: requestParameters.begin_message
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLlm(requestParameters.llmId, retellLLMBase, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RetellApi - factory interface
 * @export
 */
export const RetellApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RetellApiFp(configuration)
    return {
        /**
         * Delete an existing Retell LLM
         * @param {RetellApiDeleteLlmRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLlm(requestParameters: RetellApiDeleteLlmRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteLlm(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve details of a specific Retell LLM
         * @param {RetellApiGetLlmDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLlmDetails(requestParameters: RetellApiGetLlmDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<RetellLLMResponse> {
            return localVarFp.getLlmDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new Retell LLM
         * @param {RetellApiNewLlmRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newLlm(requestParameters: RetellApiNewLlmRequest, options?: AxiosRequestConfig): AxiosPromise<RetellLLMResponse> {
            return localVarFp.newLlm(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing Retell LLM
         * @param {RetellApiUpdateLlmRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLlm(requestParameters: RetellApiUpdateLlmRequest, options?: AxiosRequestConfig): AxiosPromise<RetellLLMResponse> {
            return localVarFp.updateLlm(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteLlm operation in RetellApi.
 * @export
 * @interface RetellApiDeleteLlmRequest
 */
export type RetellApiDeleteLlmRequest = {
    
    /**
    * Unique id of the Retell LLM to be deleted.
    * @type {string}
    * @memberof RetellApiDeleteLlm
    */
    readonly llmId: string
    
}

/**
 * Request parameters for getLlmDetails operation in RetellApi.
 * @export
 * @interface RetellApiGetLlmDetailsRequest
 */
export type RetellApiGetLlmDetailsRequest = {
    
    /**
    * Unique id of the Retell LLM to be retrieved.
    * @type {string}
    * @memberof RetellApiGetLlmDetails
    */
    readonly llmId: string
    
}

/**
 * Request parameters for newLlm operation in RetellApi.
 * @export
 * @interface RetellApiNewLlmRequest
 */
export type RetellApiNewLlmRequest = {
    
} & RetellLLMBase

/**
 * Request parameters for updateLlm operation in RetellApi.
 * @export
 * @interface RetellApiUpdateLlmRequest
 */
export type RetellApiUpdateLlmRequest = {
    
    /**
    * Unique id of the Retell LLM to be updated.
    * @type {string}
    * @memberof RetellApiUpdateLlm
    */
    readonly llmId: string
    
} & RetellLLMBase

/**
 * RetellApiGenerated - object-oriented interface
 * @export
 * @class RetellApiGenerated
 * @extends {BaseAPI}
 */
export class RetellApiGenerated extends BaseAPI {
    /**
     * Delete an existing Retell LLM
     * @param {RetellApiDeleteLlmRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetellApiGenerated
     */
    public deleteLlm(requestParameters: RetellApiDeleteLlmRequest, options?: AxiosRequestConfig) {
        return RetellApiFp(this.configuration).deleteLlm(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve details of a specific Retell LLM
     * @param {RetellApiGetLlmDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetellApiGenerated
     */
    public getLlmDetails(requestParameters: RetellApiGetLlmDetailsRequest, options?: AxiosRequestConfig) {
        return RetellApiFp(this.configuration).getLlmDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new Retell LLM
     * @param {RetellApiNewLlmRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetellApiGenerated
     */
    public newLlm(requestParameters: RetellApiNewLlmRequest, options?: AxiosRequestConfig) {
        return RetellApiFp(this.configuration).newLlm(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an existing Retell LLM
     * @param {RetellApiUpdateLlmRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetellApiGenerated
     */
    public updateLlm(requestParameters: RetellApiUpdateLlmRequest, options?: AxiosRequestConfig) {
        return RetellApiFp(this.configuration).updateLlm(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
